原题链接：https://leetcode-cn.com/problems/combination-sum/

题目描述：
    给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

    candidates 中的数字可以无限制重复被选取。

    说明：

    所有数字（包括 target）都是正整数。
    解集不能包含重复的组合。 
    示例 1:

    输入: candidates = [2,3,6,7], target = 7,
    所求解集为:
    [
      [7],
      [2,2,3]
    ]
    示例 2:

    输入: candidates = [2,3,5], target = 8,
    所求解集为:
    [
      [2,2,2,2],
      [2,3,3],
      [3,5]
    ]

思路：
    本地想到了应该是使用回溯发来做，但是自己没想到如何使用。看了题解后，使用target分别减数组里面的数字，使用回溯法+剪枝。
    另外，也看了 动态规划的算法，确实很强。
    自己实现了下回溯法。因为几个地方没处理好，坑了一下午。晚上才发现问题。具体已标注在代码里。另外有时间需要使用动态规划的算法来实现。

代码：
class Solution {

    /**
     * @param Integer[] $candidates
     * @param Integer $target
     * @return Integer[][]
     */
    function combinationSum($candidates, $target) {
        //回溯+剪支
        sort($candidates);
        $result_arr = [];
        $reduced_key_arr = [];
        
        self::recurCombination($candidates,$target,$reduced_key_arr,$result_arr);
        return $result_arr;
    }
    
    function recurCombination($candidates,$target,$reduced_key_arr,&$result_arr){
        $reduced_key_arr_num = count($reduced_key_arr);
        if($reduced_key_arr_num == 0){
            $start_key = 0;
        }else{
            $start_key = $reduced_key_arr[$reduced_key_arr_num - 1];
        }
        
        for($i=$start_key;$i<count($candidates);$i++){
            //注意：这里的target在本次循环减完之后需要，还原，坑了一下午。所以使用另一个临时taget_item,不破坏target
            $target_item = $target - $candidates[$i];
            if($target_item > 0){
                //进行递归
                $reduced_key_arr[] = $i;
                self::recurCombination($candidates,$target_item,$reduced_key_arr,$result_arr);
                //回溯关键，使用了非常规方法，是栈的方法
                array_pop($reduced_key_arr);
            }elseif($target_item < 0){
                //结束循环
                return;
            }else{
                // == 0，放入结果集中
                $reduced_key_arr[] = $i;
                $result_item = [];
                foreach($reduced_key_arr as $item){
                    $result_item[] = $candidates[$item];
                }
                $result_arr[] = $result_item;
                return;
            }
        }
        
        return;
    }
    
}


