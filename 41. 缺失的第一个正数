原题链接：https://leetcode-cn.com/problems/first-missing-positive/
题目描述；
    给定一个未排序的整数数组，找出其中没有出现的最小的正整数。

    示例 1:

    输入: [1,2,0]
    输出: 3
    示例 2:

    输入: [3,4,-1,1]
    输出: 2
    示例 3:

    输入: [7,8,9,11,12]
    输出: 1
    说明:

    你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/first-missing-positive
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

题目思路：
    因为对时间复杂库，空间复杂度有种莫名的恐惧，还是几乎没有思考就去看了评论和题解。
    大致思路就是遍历一遍 根据value值 放置在相应的key上。然后再遍历一遍 即可找到。
    我直接使用另外一个数组，不知道是否还是满足0(1)的空间复杂度。大概了估计不能。 因为题解的写法还是费了很久的。
    当我优化时，想直接在原数组上，做相应操作时，感觉又一次遍历做不完。于是又到了一个死角。下午确定下时间，空间复杂度
    
代码(法二未通过)：

class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function firstMissingPositive($nums) {
        /*方法一，看了题解大致思路后，写的。
        用到了另一个数组，时间要求达到，但是空间要求未达到，此方法空间复杂度应该是0(n)
        */
        /*
        $result_nums = [];
        
        foreach($nums as $item){
            if($item > 0){
                $result_nums[$item]++;
            }
        }
        //从1开始循环，因为不知道值有多大，所以没办法判断循环结束，但是可以保证里面一定回返回，不会无限循环
        for($i=1;;$i++){
            if($result_nums[$i]<1)
                return $i;
        }*/
        /**法一结束*/
        
        //法二 优化空间  失败
        $len = count($nums);
        for($i = 0; $i<$len;$i++ ){
            if( 0 <= $nums[$i] && $nums[$i] < $len ){
                //交换位置，让正整数放置在key也等于其值的位置，即 value:6 放置在 nums[6]处
                $swap_item = $nums[$i];
                $nums[$i] = $nums[$nums[$i]];
                $nums[$swap_item] = $swap_item;
            }
        }
        
        for($i = 1;$i<$len;$i++){
            if($i != $nums[$i]){
                return $i;
            }
        }
        //此时0的位置可能正好是$len,如果是，返回$len+1,否则，返回$len
        if($nums[0] == $len){
            return $len+1;
        }
        return $len;
        
    }
}

