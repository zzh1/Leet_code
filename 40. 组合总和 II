原题链接：https://leetcode-cn.com/problems/combination-sum-ii/

题目描述：
    给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

    candidates 中的每个数字在每个组合中只能使用一次。

    说明：

    所有数字（包括目标数）都是正整数。
    解集不能包含重复的组合。 
    示例 1:

    输入: candidates = [10,1,2,7,6,1,5], target = 8,
    所求解集为:
    [
      [1, 7],
      [1, 2, 5],
      [2, 6],
      [1, 1, 6]
    ]
    示例 2:

    输入: candidates = [2,5,2,1,2], target = 5,
    所求解集为:
    [
      [1,2,2],
      [5]
    ]

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/combination-sum-ii
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路：与上题大致相同，我也是在上题的基础上进行的调整。有两处需要修改。第一个是做减法时的起始位置，因为本题，一个值不能重复使用。
      但是 如果在数组中本来就出现了两次，那么也在一个解集里就可以使用两次。所以可能出现重复。第二处不同就是需要在复制的时候去重。
      
代码：
class Solution {

    /**
     * @param Integer[] $candidates
     * @param Integer $target
     * @return Integer[][]
     */
    function combinationSum2($candidates, $target) {
        //回溯+剪支
        sort($candidates);
        $result_arr = [];
        $reduced_key_arr = [];
        
        self::recurCombination($candidates,$target,$reduced_key_arr,$result_arr);
        return $result_arr;
    }
    
    function recurCombination($candidates,$target,$reduced_key_arr,&$result_arr){
        $reduced_key_arr_num = count($reduced_key_arr);
        if($reduced_key_arr_num == 0){
            $start_key = 0;
            $i=$start_key;
        }else{
            $start_key = $reduced_key_arr[$reduced_key_arr_num - 1];
            $i=$start_key+1;
        }
        //与上题的区别在与每次做减法时的起始key值。因需要区分情况，直接在上面做了复制
        for(;$i<count($candidates);$i++){
            //注意：这里的target在本次循环减完之后需要，还原，坑了一下午。所以使用另一个临时taget_item,不破坏target
            $target_item = $target - $candidates[$i];
            if($target_item > 0){
                //进行递归
                $reduced_key_arr[] = $i;
                self::recurCombination($candidates,$target_item,$reduced_key_arr,$result_arr);
                //回溯关键，使用了非常规方法，是栈的方法
                array_pop($reduced_key_arr);
            }elseif($target_item < 0){
                //结束循环
                return;
            }else{
                // == 0，放入结果集中
                
                $reduced_key_arr[] = $i;
                $result_item = [];
                foreach($reduced_key_arr as $item){
                    $result_item[] = $candidates[$item];
                }
                //因为可能出现重复的值，需要做去重操作
                if(!in_array($result_item,$result_arr)){
                    $result_arr[] = $result_item;
                }
                return;
            }
        }
        
        return;
    }
}



