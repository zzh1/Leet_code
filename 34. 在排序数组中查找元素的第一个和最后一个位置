原题链接: https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/
题目描述：
    给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

    你的算法时间复杂度必须是 O(log n) 级别。

    如果数组中不存在目标值，返回 [-1, -1]。

    示例 1:

    输入: nums = [5,7,7,8,8,10], target = 8
    输出: [3,4]
    示例 2:

    输入: nums = [5,7,7,8,8,10], target = 6
    输出: [-1,-1]

思路：
    上个周末看得题目，想着在上班时候做完，一直没做。一来在公司做不方便，二来思路上一直没通。
    其实看到O(log n)，排序 以后 的确想到了使用二分法。但是一直没有深挖。如何使用。
    今天来了以后看了下题解，没详细看，看了分别用二分法求出最左边下标，和最右边下标。然后自己尝试，也就做了出来。
    还是感觉自己没能活用二分法。

代码：
    class Solution {

        /**
         * @param Integer[] $nums
         * @param Integer $target
         * @return Integer[]
         */
        function searchRange($nums, $target) {
            //二分法，分别求出最左边的target下标，最右边的target下标

            $len = count($nums);
            if($len<1) return [-1,-1];

            //求target最左边的下标
            $start = 0;
            $end = $len - 1;

            while($start<$end){
                $mid = floor(($start+$end)/2);
                if($target < $nums[$mid]){
                    $end = $mid -1;
                }elseif($target > $nums[$mid]){
                    $start = $mid + 1;
                }else{
                    //$target = $nums[$mid];
                    $end = $mid;
                }
            }

            if($nums[$start] != $target) return [-1,-1]; //未找到
            $left = $start;


            //求target最右边的下标
            $start = $left;  //初始化start end
            $end = $len - 1;
            while($start<$end){
                $mid = floor(($start+$end)/2);
                if($target < $nums[$mid]){
                    $end = $mid -1;
                }elseif($target > $nums[$mid]){
                    $start = $mid + 1;
                }else{
                    //这里可能陷入死循环
                    if($target == $nums[$mid+1]){
                        $start = $mid + 1;
                    }else{
                        $start = $mid;
                        break;
                    }
                }
            }

            $right = $start;

            return [$left,$right];
        }
    }















