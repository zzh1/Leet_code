题目描述：
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

  例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

  与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

思路：
   我用暴力法解决了一遍，但是耗时太久。暴力法中无需排序。
   看了评论后，排序后，使用了双指针思想。  确实时间上优化了点，但是优化效果明显还可以。
   
代码：
class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function threeSumClosest($nums, $target) {
        //暴力法
        /*
        $len = count($nums);
        if($len<3) return -1;
        if($len == 3) return $nums[0]+$nums[1]+$nums[2];
        
        $result = $nums[0]+$nums[1]+$nums[2];
        if(abs($target - $result) == 0){
            return $result;
        }
        for($i=0;$i<$len-2;$i++){
            for($j = $i+1;$j<$len-1;$j++){
                for($z = $j+1;$z<$len;$z++){
                    $sum = $nums[$i] + $nums[$j] + $nums[$z];
                    $distance = abs($sum-$target);
                    if($distance < abs($result-$target)){
                        $result = $sum;
                    }
                    if($distance == 0) return $sum;
                }
            }
        }
        return $result;
        */
        
        //先排序，再查找，使用双指针思想
        $len = count($nums);
        if($len<3) return -1;
        
        sort($nums);
        
        $closeNum = $nums[0]+$nums[1]+$nums[2];
        
        for($i = 0;$i<$len-2;$i++){
            $l = $i+1; 
            $r = $len-1;
            while($l<$r){
                $sum = $nums[$i]+$nums[$l]+$nums[$r];
                if(abs($sum - $target) < abs($closeNum-$target)){
                    $closeNum = $sum;
                }
                
                if($sum > $target){
                    $r--;
                }else if($sum < $target){
                    $l++;
                }else{
                    //等于target
                    return $target;
                }
            }
        }
        return $closeNum;
        
    }
}










