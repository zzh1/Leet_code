题目描述：
给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

思考：
    比较常规的方法，三次循环，只不过在最里面一层匹配上后，直接break本层，无需继续循环。

优化1: 仿照第16题，排序后，使用双指针思想，但是仍然超时

    
代码：
class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function threeSum($nums) {
        /*
        //暴力法
        $len = count($nums);
        $result = [];
        $check = [];
        
        for($i=0,$t=count($result);$i<$len-2;$i++){
            for($j=$i+1;$j<$len-1;$j++){
                for($z=$j+1;$z<$len;$z++){
                    if($nums[$i]+$nums[$j]+$nums[$z] == 0 && self::checkRepeat($nums[$i],$nums[$j],$nums[$z],$result)){
                        $result[] = [$nums[$i],$nums[$j],$nums[$z]];
                        break;
                    }
                }
                if(count($result)>$t) continue;
            }
            $t = count($result);
        }
        
        return $result;
        */
        
        //双指针思想
        $len = count($nums);
        if($len < 3) return [];
        
        sort($nums);
        
        $result = [];
        $check = [];
        
        for($i=0,$t=count($result);$i<$len-2;$i++){
            $l = $i+1;
            $r = $len - 1;
            while($l < $r){
                $sum = $nums[$i]+$nums[$l]+$nums[$r];
                if($sum == 0 && self::checkRepeat($nums[$i],$nums[$l],$nums[$r],$result)){
                        $result[] = [$nums[$i],$nums[$l],$nums[$r]];
                }
                
                if($sum > 0){
                    $r--;
                }else if($sum < 0){
                    $l++ ;
                }else{
                    //等于0
                    $r--;
                    $l++;
                }
            }
        }
        
        return $result;
    }

    
    function checkRepeat($a,$b,$c,$check_arr){
        
        for($i=0;$i<count($check_arr);$i++){
            if($a == $b && $b ==$c){
                //特殊处理掉 0 0 0 的情况
                if(in_array([0,0,0],$check_arr)){
                    return false;
                }else{
                    return true;
                }
            }
            if(in_array($a,$check_arr[$i]) && in_array($b,$check_arr[$i]) && in_array($c,$check_arr[$i])){
                return false;
            }
        }
        
        return true;
    }
}

//第三次尝试，在做四数之和的时候，发现我的去重方法局限太多，毫无扩展性，在看了评论后，优化了 在使用双指针方法时的去重方式。竟然顺了通过。
      看来之前没有通过，超时很有可能是校验去重太久。
      本次去重思想：因为已经排了序，所以 在进行指针移动时，跳多重复的即可。
代码:
class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function threeSum($nums) {
        
        //双指针思想
        $len = count($nums);
        if($len < 3) return [];
        
        sort($nums);
        
        $result = [];
        $check = [];
        
        for($i=0,$t=count($result);$i<$len-2;$i++){
            if($i == 0 || ($i>0 && $nums[$i] != $nums[$i-1])){ //跳过可能重复的值
                $l = $i+1;
                $r = $len - 1;
                while($l < $r){
                    $sum = $nums[$i]+$nums[$l]+$nums[$r];
                    if($sum == 0){
                            $result[] = [$nums[$i],$nums[$l],$nums[$r]];
                    }

                    if($sum > 0){
                        while($l < $r && $nums[$r] == $nums[$r-1]) $r--;  //跳过重复值
                        $r--;
                    }else if($sum < 0){
                        while($l < $r && $nums[$l] == $nums[$l+1]) $l++;  //跳过重复值
                        $l++ ;
                    }else{
                        //等于0
                        while($l < $r && $nums[$r] == $nums[$r-1]) $r--;  //跳过重复值
                        while($l < $r && $nums[$l] == $nums[$l+1]) $l++;  //跳过重复值
                        $r--;
                        $l++;
                    }
                }    
            }
            
        }
        
        return $result;
    }
    
}

