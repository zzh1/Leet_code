原题链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array/
题目描述：
    假设按照升序排序的数组在预先未知的某个点上进行了旋转。

    ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

    搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

    你可以假设数组中不存在重复的元素。

    你的算法时间复杂度必须是 O(log n) 级别。

    示例 1:

    输入: nums = [4,5,6,7,0,1,2], target = 0
    输出: 4
    示例 2:

    输入: nums = [4,5,6,7,0,1,2], target = 3
    输出: -1

思路：
    第一看到这个题，被吓到，主要是被O(logn)的时间复杂度吓到。因为我一直不会求时间复杂度，尤其是logn怎么出来的不会。

    大概看了下题解，别人竟然一看到logn  就想到了二分法。其实这不是题目要求，而是题目的提示。
    总之：本题还是用二分法，也不需要找到旋转点具体在哪，只是使用二分法时的判断相对来说复杂了点。仔细想了想，其实并不难。
    但是我必须该了解下时间复杂度了，尤其是logn的时间复杂度如何求出。
  
代码：
class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function search($nums, $target) {
        //二分法
        $len = count($nums);
        if($len < 1) return -1;
        
        $start = 0;
        $end = $len-1;
        
        while($start<$end){
            $mid = floor(($start + $end)/2);
            
            //var_dump($mid);
            if($target == $nums[$mid]) return $mid;
            
            if($nums[$start]>$nums[$mid]){
                //旋转点在前面
                if($target >= $nums[$start] || $target < $nums[$mid]){
                    //target在前半部分
                    $end = $mid-1;
                }else{
                    //target在后半部分
                    $start = $mid+1;
                }
            }else{
                //旋转点在后面或者mid就是旋转点
                if($target < $nums[$mid] && $nums[$start] <= $target){
                    //target在前半部分
                    $end = $mid-1;
                }else{
                    //target在后半部分
                    $start = $mid+1;
                }
            }
        }
        if($start == $end && $nums[$start]==$target) return $start; //找到了
        return -1;
    }
}






