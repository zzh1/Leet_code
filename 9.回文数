判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
进阶:

你能不将整数转为字符串来解决这个问题吗？

思考：
不将整数转为字符串来处理，通过一些运算，
首先 负数一定不是回文数，0一定是；先将这两种特殊情况处理；
思路：判断  该整数 与 逆序整数 是否相等
  即 不断将该整数除10取余，并求出逆序值。
  
代码：
    function isPalindrome($x) {
        if($x<0){
            //负数一定不是回文数
            return false;
        }elseif($x == 0){
            // 0一定是回文数
            return true;
        }
        
        $asc = $x;
        
        $desc = 0;
        
        while($asc != 0){
            $remainder = $asc%10;
            
            $asc = floor($asc/10);
            
            $desc = $desc*10 + $remainder;
        }
        
        if($x == $desc){
            return true;
        }else{
            return false;
        }
        
    }
    
执行用时 : 168 ms, 在Palindrome Number的PHP提交中击败了25.23% 的用户
内存消耗 : 14.7 MB, 在Palindrome Number的PHP提交中击败了100.00% 的用户

内存消耗很少，但是时间上耗时较多，进行时间优化，
思考：只需要比较一般即可，或者只要返现不同,但是不能知道位数
