题目：
  给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。
  找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。

(此处缺图，原题连接:https://leetcode-cn.com/problems/container-with-most-water/)

图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

思路：
    一开始很明显的想到暴力法，但暴力法毫无意义，我就在想 通过 方程式看看 是否可以优化，随后想到了应该去比较 比目前值更高的。
 但是，正向思路里，因为底是不断变大的，所以即使高在变小，也不能确定体积在变小。 此时看评论里的解释。
 
正确思路：
    双指针，从两边开始，值小的向内移动。减少了大量的搜索空间。

代码：
class Solution {

    /**
     * @param Integer[] $height
     * @return Integer
     */
    function maxArea($height) {
        /*
        // 暴力法，很low且无意义
        $Vmax = 0;
        $len = count($height);
        for($i = 0;$i < $len-1;$i++){
            for($j = $i +1; $j < $len; $j++){
                $V = min($height[$i],$height[$j])*($j-$i);
                if($V > $Vmax){
                    $Vmax = $V;
                }
            }
        }
        return $Vmax;
        */
        
        //动态规划
        if(count($height)<=1) return -1;
        $i = 0;
        $j = count($height)-1;
        $res = 0;
        
        while ($i<$j){
            $h = min($height[$i],$height[$j]);
            $res = max($res,$h*($j-$i));
            if($height[$i]<$height[$j]) {
                $i++;
            }else{
                $j--;
            }
        }
        
        return $res;        
    }
}

