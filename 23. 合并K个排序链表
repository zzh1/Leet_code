原题链接：https://leetcode-cn.com/problems/merge-k-sorted-lists/

题目描述：
  合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

  示例:

  输入:
  [
    1->4->5,
    1->3->4,
    2->6
  ]
  输出: 1->1->2->3->4->4->5->6
  
思路：
   按照之前合并两个有序链表的思路，想着依次进行两两合并，但是一直没有具体思路。
   查看了题解以后 ，大神写的很牛逼，分治法，思路也是换成两两有序链表的合并。包括两个链表合并过程中都使用了分治。很彻底。
   我重点看了分治法。
   
   但是，我没有看懂 算法复杂度。   

大神描述：
  思路 1：
  优先级队列

  时间复杂度：O(n*log(k))O(n∗log(k))，n 是所有链表中元素的总和，k 是链表个数。

  思路 2：
  分而治之

  链表两两合并


代码：
/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = $val; }
 * }
 */
class Solution {

    /**
     * @param ListNode[] $lists
     * @return ListNode
     */
    function mergeKLists($lists) {
        
        if( $lists == null || count($lists) == 0 ) return null;
        
        //分治法
        return self::merge($lists,0,count($lists)-1);
        
    }
    
    function merge($lists,$left,$right){
        if($left == $right ) return $lists[$left];
        $mid = $left + (int)(($right-$left)/2);
        $l1 = self::merge($lists,$left,$mid);
        $l2 = self::merge($lists,$mid+1,$right);
        return self::mergeTwoList($l1,$l2);
    }
    
    
    function mergeTwoList($l1,$l2){
        if($l1==null) return $l2;
        if($l2 ==null) return $l1;
        
        if($l1->val < $l2->val){
            $l1->next = self::mergeTwoList($l1->next,$l2);
            return $l1;
        }else{
            $l2->next = self::mergeTwoList($l1,$l2->next);
            return $l2;
        }
    }
}




